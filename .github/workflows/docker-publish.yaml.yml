name: be-docker-publish

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:

permissions:
  contents: read
  packages: write
  security-events: write  # For security scanning

env:
  IMAGE_NAME: ghcr.io/hermanngeorge15/personalweb-be

jobs:
  # Run unit tests first
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run unit tests
        run: ./gradlew test
        continue-on-error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test/
          retention-days: 7

  # Build and push Docker image
  docker:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: test  # Only build if tests pass
    if: github.event_name != 'pull_request'
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build (tests already ran)
        run: ./gradlew clean build -x test

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
            type=ref,event=tag

      - name: Build & Push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Security scan (optional - won't fail the build)
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    needs: [ docker ]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://jirihermann.com
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            cd /opt/jiri-site
            
            echo "Pulling latest image..."
            docker compose pull
            
            echo "Deploying new version..."
            docker compose up -d
            
            echo "Waiting for service to start..."
            sleep 15
            
            echo "Running health check..."
            if curl -f http://localhost:8891/actuator/health; then
              echo "✅ Deployment successful! Service is healthy."
            else
              echo "❌ Health check failed!"
              echo "Attempting to view logs..."
              docker compose logs backend --tail=50
              exit 1
            fi
            
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo "Deployment complete!"
